General
My project name is <projectName>, authored by <projectAuthor>, and aimed at <projectAudience>. The project plan is <projectPlan>.

Frontend
My project name is <projectName>, and the frontend is built using <framework>. The primary language is <language>, with <styling> as the styling solution. State management will be handled using <stateManagement>, and form handling is done via <formHandling>. Authentication setup is <authentication>. The project will use <routing> for routing, <uiLibrary> for UI components, and <packageManager> as the package manager. Testing will be handled using <testing>. Analytics provider is <analytics>, SEO setup will <be/not be> there, and i18n (Internationalization) setup will <be/not be>  there. PWA configuration will <be/not be> there.

Backend
My backend project is named <projectName>, built using <framework> with <language> as the primary language. API specifications follow <apiSpec>, and authentication is handled via <authentication>. The database used is <database>, with <orm> as the ORM. Caching mechanism is <caching>. Containerization is <docker>, and messaging service is <messaging>. Monitoring setup is <monitoring>. Testing will be done using <testing>.

Fullstack
My fullstack project is <projectName>, using <frontendFramework> for the frontend and <backendFramework> for the backend. The database is <database>, managed using <orm>. Authentication is set up as <authentication>.
The deployment strategy includes <deployment>.

CLI
The CLI project <projectName> is developed using <language>. It will include <argumentParser> for argument parsing and <logging> for logging. The CLI <have <solution> as/not have> an interactive mode.

Mobile
My mobile project is <projectName>, using <framework> as the framework. State management is handled by <stateManagement>, and authentication is set up as <authentication>. Navigation solution is <navigation>, and data storage is managed using <storage>.

AI-ML
My AI/ML project <projectName> focuses on <projectType>. It will be developed using <framework>, with <GPU support/no GPU support>. Data processing involves <dataProcessing>, and experiment tracking is <there/not there>. Model tracking is done via <modelTracking>, and visualization tools include <visualization>. Deployment strategy is <deployment>.

Game Development
My game development project <projectName> is a <dimension> game built using <engine>. The genre is <genre>, and physics engine is <physics>. Multiplayer support is <multiplayer>, <with/without> asset management. The game <includes/does not include> a save system.

DevOps
My DevOps project <projectName> uses <cloudProvider> as the cloud provider. CI/CD is managed through <cicd>, with <orchestration> for orchestration and <infrastructure> for infrastructure management. Containerization is handled by <containerization>, and monitoring is done using <monitoring>. Service discovery is <serviceDiscovery>, security setup is <security>. <Include/Do not include> compliance and policy as code setup . <Include/Do not include> backup and disaster recovery setup

Generate a structured directory layout for this project and the corresponding boilerplate code.

The output should be in this exact format:

{ "structure": [ ("path/to/file", "type"), # type is either "file" or "folder" ], "boilerplate": { "path/to/file": "content of file with \n for newlines", }, "scripts": [ "script command 1", "script command 2", ] }

Here's an example of what the output should look like:

{ "structure": [ ("src", "folder"), ("src/components", "folder"), ("src/pages", "folder"), ("src/App.tsx", "file"), ("src/main.tsx", "file"), ("public", "folder"), ("public/manifest.json", "file"), ("package.json", "file"), ("tsconfig.json", "file"), ("tailwind.config.ts", "file"), ("postcss.config.ts", "file"), ("vite.config.ts", "file"), ("index.html", "file") ], "boilerplate": { "src/App.tsx": "import { Button } from "@/components/ui/button";\n\nfunction App() {\n return (\n <div className="flex items-center justify-center h-screen">\n <Button>Click me</Button>\n </div>\n );\n}\n\nexport default App;", "src/main.tsx": "import React from "react";\nimport ReactDOM from "react-dom/client";\nimport App from "./App";\nimport "./index.css";\n\nReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(\n <React.StrictMode>\n <App />\n </React.StrictMode>\n);", "public/manifest.json": "{\n "short_name": "App",\n "name": "Project Name",\n "icons": [],\n "start_url": ".",\n "display": "standalone",\n "theme_color": "#ffffff",\n "background_color": "#ffffff"\n}", "package.json": "{\n "name": "project-name",\n "version": "0.1.0",\n "private": true,\n "dependencies": {\n "react": "^18.0.0",\n "react-dom": "^18.0.0",\n "@shadcn/ui": "latest"\n },\n "devDependencies": {\n "typescript": "^5.0.0",\n "vite": "^4.0.0",\n "tailwindcss": "latest",\n "postcss": "latest",\n "autoprefixer": "latest"\n }\n}", "tsconfig.json": "{\n "compilerOptions": {\n "target": "esnext",\n "module": "esnext",\n "jsx": "react-jsx",\n "strict": true\n }\n}", "tailwind.config.ts": "import type { Config } from 'tailwindcss';\n\nconst config: Config = {\n content: ["./index.html", "./src/**/*.{ts,tsx}"],\n theme: {\n extend: {},\n },\n plugins: [],\n};\n\nexport default config;", "postcss.config.ts": "export default {\n plugins: {\n tailwindcss: {},\n autoprefixer: {},\n },\n};", "vite.config.ts": "import { defineConfig } from "vite";\nimport react from "@vitejs/plugin-react";\n\nexport default defineConfig({\n plugins: [react()],\n});", "index.html": "<!DOCTYPE html>\n<html lang="en">\n<head>\n <meta charset="UTF-8" />\n <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n <link rel="manifest" href="/manifest.json" />\n <title>Project Name</title>\n</head>\n<body>\n <div id="root"></div>\n <script type="module" src="/src/main.tsx"></script>\n</body>\n</html>" }, "scripts": [ "npm install", "npm run dev", "npm run build", "npm run preview" ] }

Give ONLY the output in the exact format shown above with your project structure, boilerplate code, and scripts.
